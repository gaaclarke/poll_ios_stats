// Autogenerated from Pigeon (v0.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import
import 'dart:async';
import 'package:flutter/services.dart';

class MemoryUsage {
  double dirtyMemoryUsage;
  double ownedSharedMemoryUsage;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['dirtyMemoryUsage'] = dirtyMemoryUsage;
    pigeonMap['ownedSharedMemoryUsage'] = ownedSharedMemoryUsage;
    return pigeonMap;
  }
  // ignore: unused_element
  static MemoryUsage _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final MemoryUsage result = MemoryUsage();
    result.dirtyMemoryUsage = pigeonMap['dirtyMemoryUsage'];
    result.ownedSharedMemoryUsage = pigeonMap['ownedSharedMemoryUsage'];
    return result;
  }
}

class StartupTime {
  int startupTime;
  // ignore: unused_element
  Map<dynamic, dynamic> _toMap() {
    final Map<dynamic, dynamic> pigeonMap = <dynamic, dynamic>{};
    pigeonMap['startupTime'] = startupTime;
    return pigeonMap;
  }
  // ignore: unused_element
  static StartupTime _fromMap(Map<dynamic, dynamic> pigeonMap) {
    final StartupTime result = StartupTime();
    result.startupTime = pigeonMap['startupTime'];
    return result;
  }
}

class PollIosStats {
  Future<MemoryUsage> pollMemoryUsage() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.PollIosStats.pollMemoryUsage', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return MemoryUsage._fromMap(replyMap['result']);
    }
    
  }
  Future<StartupTime> pollStartupTime() async {
    const BasicMessageChannel<dynamic> channel =
        BasicMessageChannel<dynamic>('dev.flutter.pigeon.PollIosStats.pollStartupTime', StandardMessageCodec());
    
    final Map<dynamic, dynamic> replyMap = await channel.send(null);
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
        details: null);
    } else if (replyMap['error'] != null) {
      final Map<dynamic, dynamic> error = replyMap['error'];
      throw PlatformException(
          code: error['code'],
          message: error['message'],
          details: error['details']);
    } else {
      return StartupTime._fromMap(replyMap['result']);
    }
    
  }
}

